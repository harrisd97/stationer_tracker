2025-07-02 14:22:27,941 INFO: [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5050
 * Running on http://192.168.2.46:5050
2025-07-02 14:22:27,942 INFO: [33mPress CTRL+C to quit[0m
2025-07-02 14:22:27,942 INFO:  * Restarting with stat
2025-07-02 14:22:28,102 WARNING:  * Debugger is active!
2025-07-02 14:22:28,110 INFO:  * Debugger PIN: 121-968-921
2025-07-02 14:22:39,214 INFO: Request: GET / - 127.0.0.1
2025-07-02 14:22:39,219 INFO: Response Status: 200 OK
2025-07-02 14:22:39,220 DEBUG: Response Body: <!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Artisan Workspace</title>
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<style>
body {
  margin: 0;
  font-family: 'Poppins', sans-serif;
  background-color: #f0f0f0; /* Light neutral background */
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  color: #323232;
}

/* Header with dark blue gradient, diagonal shape, and white text */
.header {
  background: linear-gradient(135deg, #29102a, #994ac3, #582c64); /* Deep attractive dark blue gradient */
  padding: 2.5rem 1rem;
  text-align: center;
  color: #fff; /* White text for neatness */
  clip-path: polygon(0 0, 100% 0, 100% 70%, 0 100%);
}
.header h1 {
  font-size: 2.2rem;
  margin-bottom: 0.3rem;
  letter-spacing: 1px;
  font-weight: 700;
  display: flex;
  align-items: center;
  justify-content: center;
}

.header p {
  font-size: 0.9rem;
  max-width: 700px;
  margin: 0 auto;
  line-height: 1.4;
  border-top: 2px solid #fff; /* White line below the title for clean division */
  margin-top: 0.5rem;
  padding-top: 0.5rem;
}

/* Container as CSS Grid: 4 in a row, centered, neat with spacing */
.cards-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1rem;
  padding: 2rem;
  background-color: #f0f0f0; /* Same as body for seamless look */
  margin-top: -1rem;
}
@media(max-width: 768px){
  .cards-container {
    grid-template-columns: repeat(2, 1fr);
  }
}
/* Style for each box: clean, uniform, and attractive */
.card {
  padding: 1.2rem;
  border-radius: 1rem;
  box-shadow: 0 6px 15px rgba(0,0,0,0.08);
  background: #fff; /* White for neatness */
  cursor: pointer;
  transition: all 0.3s ease;
  height: 150px; /* uniform height for consistency */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
}
.card:hover {
  transform: translateY(-6px);
  box-shadow: 0 12px 20px rgba(0,0,0,0.15);
}
.card i {
  font-size: 2rem;
  margin-bottom: 0.75rem;
  transition: transform 0.3s, color 0.3s;
}
.card:hover i {
  color: #0f2027; /* Dark blue matching header for hover effect */
  transform: scale(1.2);
}
h5 {
  font-size: 1rem;
  margin-bottom: 0.3rem;
  font-weight: 600;
  color: #444;
}
h6 {
  font-size: 0.90rem;
  color: #fefefe;
  line-height: 1.2;
  margin: 0;
}
p {
  font-size: 0.75rem;
  color: #555;
  line-height: 1.2;
  margin: 0;
}

/* Border colors for variety */
.card:nth-child(1) { border-top: 3px solid #ff6f61; }
.card:nth-child(2) { border-top: 3px solid #ffb347; }
.card:nth-child(3) { border-top: 3px solid #006064; } /* Dark blue accent */
.card:nth-child(4) { border-top: 3px solid #00b894; }
.card:nth-child(5) { border-top: 3px solid #fd79a8; }
.card:nth-child(6) { border-top: 3px solid #fdba74; }
.card:nth-child(7) { border-top: 3px solid #0984e3; }
.card:nth-child(8) { border-top: 3px solid #00cec9; }

/* Footer with white background, black text, matching style */
.footer {
  background-color: #ffffff;
  color: #000;
  padding: 1rem;
  text-align: center;
  font-size: 0.9rem;
  margin-top: auto;
  border-radius: 0 0 1rem 1rem;
  box-shadow: inset 0 -2px 10px rgba(0,0,0,0.02);
}
</style>
</head>
<body>

<!-- Header: Dark Blue Gradient, Diagonal, White Text, with Icon -->
<div class="header">
  <h1>Stationer Success Tracker</h1>
  <h6>Track leads, projects, and profits - all in one place.</h6>
</div>

<!-- Grid of 4 in a row, responsive to smaller screens -->
<div class="cards-container">
  <div class="card" onclick="location.href='/projects'">
    <i class="fas fa-pen-nib"></i>
    <h5>Design Projects</h5>
    <p>Manage your creative card & stationery projects.</p>
  </div>
  <div class="card" onclick="location.href='/client-experiences'">
    <i class="fas fa-user-friends"></i>
    <h5>Clients & Feedback</h5>
    <p>Track customer feedback and testimonials.</p>
  </div>
  <div class="card" onclick="location.href='/costs'">
    <i class="fas fa-hand-holding-usd"></i>
    <h5>Expenses & Profit</h5>
    <p>Monitor finances clearly and simply.</p>
  </div>
  <div class="card" onclick="location.href='/tasks'">
    <i class="fas fa-sync-alt"></i>
    <h5>Tasks & Routine</h5>
    <p>Stay on top of your daily work.</p>
  </div>
  <div class="card" onclick="location.href='/posts'">
    <i class="fas fa-lightbulb"></i>
    <h5>Content & Ideas</h5>
    <p>Plan your creative content easily.</p>
  </div>
  <div class="card" onclick="location.href='/issues'">
    <i class="fas fa-exclamation-circle"></i>
    <h5>Workflow & Challenges</h5>
    <p>Identify delays and bottlenecks.</p>
  </div>
  <div class="card" onclick="location.href='/inquiry'">
    <i class="fas fa-comments"></i>
    <h5>Leads & Sales</h5>
    <p>Track inquiries and convert leads.</p>
  </div>
  <div class="card" onclick="location.href='/time'">
    <i class="fas fa-hourglass-half"></i>
    <h5>Time & Hours</h5>
    <p>Log your work hours efficiently.</p>
  </div>
</div>

<!-- Footer -->
<div class="footer">
  &copy; <strong>Stationer Success Tracker</strong>. Built with ‚ù§Ô∏è to help creative businesses thrive.
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
2025-07-02 14:22:39,220 INFO: 127.0.0.1 - - [02/Jul/2025 14:22:39] "GET / HTTP/1.1" 200 -
2025-07-02 14:22:41,388 INFO: Request: GET / - 127.0.0.1
2025-07-02 14:22:41,389 INFO: Response Status: 200 OK
2025-07-02 14:22:41,389 DEBUG: Response Body: <!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Artisan Workspace</title>
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<style>
body {
  margin: 0;
  font-family: 'Poppins', sans-serif;
  background-color: #f0f0f0; /* Light neutral background */
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  color: #323232;
}

/* Header with dark blue gradient, diagonal shape, and white text */
.header {
  background: linear-gradient(135deg, #29102a, #994ac3, #582c64); /* Deep attractive dark blue gradient */
  padding: 2.5rem 1rem;
  text-align: center;
  color: #fff; /* White text for neatness */
  clip-path: polygon(0 0, 100% 0, 100% 70%, 0 100%);
}
.header h1 {
  font-size: 2.2rem;
  margin-bottom: 0.3rem;
  letter-spacing: 1px;
  font-weight: 700;
  display: flex;
  align-items: center;
  justify-content: center;
}

.header p {
  font-size: 0.9rem;
  max-width: 700px;
  margin: 0 auto;
  line-height: 1.4;
  border-top: 2px solid #fff; /* White line below the title for clean division */
  margin-top: 0.5rem;
  padding-top: 0.5rem;
}

/* Container as CSS Grid: 4 in a row, centered, neat with spacing */
.cards-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1rem;
  padding: 2rem;
  background-color: #f0f0f0; /* Same as body for seamless look */
  margin-top: -1rem;
}
@media(max-width: 768px){
  .cards-container {
    grid-template-columns: repeat(2, 1fr);
  }
}
/* Style for each box: clean, uniform, and attractive */
.card {
  padding: 1.2rem;
  border-radius: 1rem;
  box-shadow: 0 6px 15px rgba(0,0,0,0.08);
  background: #fff; /* White for neatness */
  cursor: pointer;
  transition: all 0.3s ease;
  height: 150px; /* uniform height for consistency */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
}
.card:hover {
  transform: translateY(-6px);
  box-shadow: 0 12px 20px rgba(0,0,0,0.15);
}
.card i {
  font-size: 2rem;
  margin-bottom: 0.75rem;
  transition: transform 0.3s, color 0.3s;
}
.card:hover i {
  color: #0f2027; /* Dark blue matching header for hover effect */
  transform: scale(1.2);
}
h5 {
  font-size: 1rem;
  margin-bottom: 0.3rem;
  font-weight: 600;
  color: #444;
}
h6 {
  font-size: 0.90rem;
  color: #fefefe;
  line-height: 1.2;
  margin: 0;
}
p {
  font-size: 0.75rem;
  color: #555;
  line-height: 1.2;
  margin: 0;
}

/* Border colors for variety */
.card:nth-child(1) { border-top: 3px solid #ff6f61; }
.card:nth-child(2) { border-top: 3px solid #ffb347; }
.card:nth-child(3) { border-top: 3px solid #006064; } /* Dark blue accent */
.card:nth-child(4) { border-top: 3px solid #00b894; }
.card:nth-child(5) { border-top: 3px solid #fd79a8; }
.card:nth-child(6) { border-top: 3px solid #fdba74; }
.card:nth-child(7) { border-top: 3px solid #0984e3; }
.card:nth-child(8) { border-top: 3px solid #00cec9; }

/* Footer with white background, black text, matching style */
.footer {
  background-color: #ffffff;
  color: #000;
  padding: 1rem;
  text-align: center;
  font-size: 0.9rem;
  margin-top: auto;
  border-radius: 0 0 1rem 1rem;
  box-shadow: inset 0 -2px 10px rgba(0,0,0,0.02);
}
</style>
</head>
<body>

<!-- Header: Dark Blue Gradient, Diagonal, White Text, with Icon -->
<div class="header">
  <h1>Stationer Success Tracker</h1>
  <h6>Track leads, projects, and profits - all in one place.</h6>
</div>

<!-- Grid of 4 in a row, responsive to smaller screens -->
<div class="cards-container">
  <div class="card" onclick="location.href='/projects'">
    <i class="fas fa-pen-nib"></i>
    <h5>Design Projects</h5>
    <p>Manage your creative card & stationery projects.</p>
  </div>
  <div class="card" onclick="location.href='/client-experiences'">
    <i class="fas fa-user-friends"></i>
    <h5>Clients & Feedback</h5>
    <p>Track customer feedback and testimonials.</p>
  </div>
  <div class="card" onclick="location.href='/costs'">
    <i class="fas fa-hand-holding-usd"></i>
    <h5>Expenses & Profit</h5>
    <p>Monitor finances clearly and simply.</p>
  </div>
  <div class="card" onclick="location.href='/tasks'">
    <i class="fas fa-sync-alt"></i>
    <h5>Tasks & Routine</h5>
    <p>Stay on top of your daily work.</p>
  </div>
  <div class="card" onclick="location.href='/posts'">
    <i class="fas fa-lightbulb"></i>
    <h5>Content & Ideas</h5>
    <p>Plan your creative content easily.</p>
  </div>
  <div class="card" onclick="location.href='/issues'">
    <i class="fas fa-exclamation-circle"></i>
    <h5>Workflow & Challenges</h5>
    <p>Identify delays and bottlenecks.</p>
  </div>
  <div class="card" onclick="location.href='/inquiry'">
    <i class="fas fa-comments"></i>
    <h5>Leads & Sales</h5>
    <p>Track inquiries and convert leads.</p>
  </div>
  <div class="card" onclick="location.href='/time'">
    <i class="fas fa-hourglass-half"></i>
    <h5>Time & Hours</h5>
    <p>Log your work hours efficiently.</p>
  </div>
</div>

<!-- Footer -->
<div class="footer">
  &copy; <strong>Stationer Success Tracker</strong>. Built with ‚ù§Ô∏è to help creative businesses thrive.
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
2025-07-02 14:22:41,389 INFO: 127.0.0.1 - - [02/Jul/2025 14:22:41] "GET / HTTP/1.1" 200 -
2025-07-02 14:22:42,084 INFO: Request: GET /costs - 127.0.0.1
2025-07-02 14:22:42,085 INFO: Response Status: 404 NOT FOUND
2025-07-02 14:22:42,085 DEBUG: Response Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2025-07-02 14:22:42,086 INFO: 127.0.0.1 - - [02/Jul/2025 14:22:42] "[33mGET /costs HTTP/1.1[0m" 404 -
2025-07-02 14:22:44,820 INFO: Request: GET /client-experiences - 127.0.0.1
2025-07-02 14:22:44,825 INFO: Response Status: 200 OK
2025-07-02 14:22:44,825 DEBUG: Response Body: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  
  <!--Title-->
  <title>Client Experience Tracker</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  
  
  <style>
    body {
      margin: 0;
      font-family: 'Poppins', sans-serif;
      background-color: #f0f0f0;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      color: #323232;
      font-size: 0.9rem; /* smaller base font size */
    }

    /* Header with diagonal gradient shape, smaller font size */
    .header {
      background: linear-gradient(135deg, #29102a, #994ac3, #582c64);
      padding: 2.5rem 1rem;
      text-align: center;
      color: #fff;
      clip-path: polygon(0 0, 100% 0, 100% 70%, 0 100%);
    }

    .header h1 {
      font-size: 2.2rem;
      margin-bottom: 0.3rem;
      letter-spacing: 1px;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    h6 {
      font-size: 0.90rem;
      /*color: #fefefe;*/
      line-height: 1.2;
      margin: 0;
    }

    .header p {
      font-size: 0.8rem;
      max-width: 700px;
      margin: 0 auto;
      line-height: 1.3;
      border-top: 2px solid #fff;
      margin-top: 0.4rem;
      padding-top: 0.4rem;
    }

    h2 {
      font-size: 2rem;
    }

    /* Main container with scroll */
    .main-container {
      flex: 1;
      overflow-y: auto;
      padding: 1.5rem 1rem;
      max-height: calc(100vh - 160px); /* adjust as needed for header/footer size */
    }

    .summary-cards {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .summary-card {
      flex: 1;
      min-width: 150px;
      background: white;
      padding: 1rem;
      text-align: center;
      border-radius: 12px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    }
    
    /* Form styling */
#feedbackForm {
  display: flex;
  flex-direction: column;
  font-size: 0.85rem;
}

#feedbackForm .row {
  margin-bottom: 0.75rem;
}

#feedbackForm label {
  font-weight: 600;
  margin-bottom: 0.3rem;
  display: block;
  font-size: 0.9rem;
}

#feedbackForm input,
#feedbackForm select {
  width: 100%;
  padding: 0.4rem;
  border-radius: 0.4rem;
  border: 1px solid #ccc;
  font-size: 0.85rem;
}

#feedbackForm .d-flex {
  gap: 0.5rem;
}

/* Table styles */
table {
  width: 100%;
  background: #fff;
  border-radius: 0.5rem;
  overflow: hidden;
  font-size: 0.85rem;
}
thead {
  background-color: #f8f9fa;
}
tbody tr:hover {
  background-color: #f1f1f1;
}

    .pagination-controls {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1rem;
      margin-top: 1rem;
    }

    /* Loading overlay styles */
    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.7);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
    }

    .spinner-border {
      width: 2rem;
      height: 2rem;
    }

    /* Pagination controls */
    .pagination-controls {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1rem;
      margin-top: 1rem;
    }

    /* Footer style */
    .footer {
      background-color: #ffffff;
      color: #000;
      padding: 1rem;
      text-align: center;
      font-size: 0.9rem;
      margin-top: auto;
      border-radius: 0 0 1rem 1rem;
      box-shadow: inset 0 -2px 10px rgba(0, 0, 0, 0.02);
    }

    .action-icon {
      cursor: pointer;
    }

    .action-icon:hover {
      color: #0d6efd;
    }
  </style>
</head>
<body>



  <!-- Header -->
  <div class="header text-center">
    <h1>
      <a href="/" class="text-white text-decoration-none">Stationer Success Tracker</a>
    </h1>
    <h6 class="text-light">Track leads, projects, and profits - all in one place.</h6>
  </div>

  <!-- Main Content with scroll -->
  <div class="main-container" id="scrollContainer">

    <!-- Header with back button -->
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h2>Client Experiences</h2>
      <a class="btn btn-outline-secondary btn-sm" href="/">Back to Home</a>
    </div>

    <!-- Dashboard -->
    <div class="summary-cards">
      <div class="summary-card">
        <h6>Avg. Score</h6>
        <p id="avgScore">-</p>
      </div>
      <div class="summary-card">
        <h6>Testimonials</h6>
        <p id="testimonialPct">-</p>
      </div>
      <div class="summary-card">
        <h6>Referrals</h6>
        <p id="referralPct">-</p>
      </div>
      <div class="summary-card">
        <h6>Total Entries</h6>
        <p id="totalCount">-</p>
      </div>
    </div>

    <!-- Add button and entries limit -->
    <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
      <button class="btn btn-primary btn-sm" id="addFeedbackBtn">+ Add Feedback</button>
      <div class="d-flex align-items-center">
        <label class="me-2 mb-0">Show</label>
        <select id="limitSelect" class="form-select d-inline-block w-auto" style="width:auto;">
          <option value="5">5</option>
          <option value="10" selected>10</option>
          <option value="25">25</option>
          <option value="50">50</option>
        </select>
        <span class="ms-2">entries</span>
      </div>
    </div>

    <!-- Feedback Form -->
    <div id="feedbackFormSection" style="display:none;">
      <form id="clientExperienceForm" class="p-3 border rounded bg-white mb-4">
        <input type="hidden" id="experience_id" />

        <div class="row mb-2">
          <div class="col-md-6">
            <label>Project</label>
            <select id="project_id" class="form-select" required></select>
          </div>
          <div class="col-md-6">
            <label>Score (1‚Äì10)</label>
            <input type="number" min="1" max="10" id="score" class="form-control" required />
          </div>
        </div>

        <div class="row mb-2">
          <div class="col-md-6">
            <label>Feedback Theme</label>
            <select id="feedback_theme" class="form-select"></select>
          </div>
          <div class="col-md-6">
            <label>Notes</label>
            <input type="text" id="notes" class="form-control" />
          </div>
        </div>

        <div class="row mb-2">
          <div class="col-md-6 form-check">
            <input type="checkbox" id="testimonial_collected" class="form-check-input" />
            <label class="form-check-label" for="testimonial_collected">Testimonial Collected</label>
          </div>
          <div class="col-md-6 form-check">
            <input type="checkbox" id="referral_collected" class="form-check-input" />
            <label class="form-check-label" for="referral_collected">Referral Given</label>
          </div>
        </div>

        <div class="d-flex gap-2 mt-3">
          <button type="submit" class="btn btn-success btn-sm">Save</button>
          <button type="button" class="btn btn-outline-danger btn-sm" onclick="closeForm()">Close</button>
        </div>
      </form>
    </div>


    <!-- Feedback Table -->
    <div class="table-responsive position-relative mb-4">
      <div id="loading" class="loading-overlay" style="display:none;">
        <div class="spinner-border text-danger"></div>
      </div>
      <table class="table table-bordered table-striped mb-0">
        <thead class="table-light">
          <tr>
            <th>#</th>
            <th>Client</th>
            <th>Project</th>
            <th>Score</th>
            <th>Feedback</th>
            <th>Testimonial</th>
            <th>Referral</th>
            <th>Notes</th>
            <th>Edit</th>
          </tr>
        </thead>
        <tbody id="clientGrid"></tbody>
      </table>
    </div>

    <!-- Pagination -->
    <div class="pagination-controls mb-4 justify-content-center d-flex gap-2">
      <button id="prevBtn" class="btn btn-sm btn-outline-secondary" onclick="changePage(-1)">Prev</button>
      <span id="pageIndicator">Page 1</span>
      <button id="nextBtn" class="btn btn-sm btn-outline-secondary" onclick="changePage(1)">Next</button>
    </div>

  </div>

    <!-- Footer -->
    <div class="footer">
        ¬© <strong>Stationer Success Tracker</strong>. Built with ‚ù§Ô∏è to help creative businesses thrive.
      </div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- Your existing HTML structure, add this inside your HTML body where appropriate -->

<div id="toastBox" style="position: fixed; top: 1rem; right: 1rem; z-index: 9999;"></div>
<!-- Updated and error-handled script for Client Experience -->
<script>
    let currentPage = 1;
    let limit = 10;
  
    window.onload = () => {
      loadProjectsDropdown();
      loadLOV("FEEDBACK_THEME", "feedback_theme");
      loadClientExperiences();
      loadExperienceDashboard();
    };
  
    document.getElementById("limitSelect").addEventListener("change", () => {
      limit = parseInt(document.getElementById("limitSelect").value);
      currentPage = 1;
      loadClientExperiences();
    });
  
    document.getElementById("addFeedbackBtn").addEventListener("click", () => {
      resetForm();
    });
  
    async function loadClientExperiences() {
      const loadingOverlay = document.getElementById("loading");
      if (loadingOverlay) loadingOverlay.style.display = "flex";
  
      try {
        const res = await fetch(`/api/client-experiences?page=${currentPage}&limit=${limit}`);
        const data = await res.json();
  
        if (!Array.isArray(data)) throw new Error("Invalid data format");
  
        const tbody = document.getElementById("clientGrid");
        tbody.innerHTML = "";
  
        if (data.length === 0) {
          document.getElementById("pageIndicator").innerText = "No records";
          document.getElementById("prevBtn").style.display = "none";
          document.getElementById("nextBtn").style.display = "none";
          return;
        }
  
        document.getElementById("pageIndicator").innerText = `Page ${currentPage}`;
        document.getElementById("prevBtn").style.display = currentPage === 1 ? "none" : "inline-block";
        document.getElementById("nextBtn").style.display = data.length < limit ? "none" : "inline-block";
  
        data.forEach((row, idx) => {
          const sno = (currentPage - 1) * limit + idx + 1;
          tbody.innerHTML += `
            <tr>
              <td>${sno}</td>
              <td>${row.client_name}</td>
              <td>${row.project_reference}</td>
              <td>${row.score}</td>
              <td>${row.feedback_theme_desc || ""}</td>
              <td>${row.testimonial_collected ? 'Yes' : 'No'}</td>
              <td>${row.referral_collected ? 'Yes' : 'No'}</td>
              <td>${row.notes || ""}</td>
              <td><button class="btn btn-sm btn-link p-0" onclick="editExperience(${row.experience_id})">‚úèÔ∏è</button></td>
            </tr>`;
        });
      } catch (err) {
        showToast("Failed to load client experiences.", "danger");
        console.error("loadClientExperiences error:", err);
      } finally {
        if (loadingOverlay) loadingOverlay.style.display = "none";
      }
    }
  
    function changePage(dir) {
      currentPage += dir;
      loadClientExperiences();
    }
  
    async function editExperience(id) {
      try {
        const res = await fetch(`/api/client-experience/${id}`);
        const data = await res.json();
  
        if (!data || Object.keys(data).length === 0) {
          showToast("Experience not found.", "warning");
          return;
        }
  
        document.getElementById("feedbackFormSection").style.display = "block";
  
        for (const key in data) {
          const el = document.getElementById(key);
          if (el) {
            if (typeof data[key] === "boolean") {
              el.checked = data[key];
            } else {
              el.value = data[key] || "";
            }
          }
        }
        window.scrollTo(0, 0);
      } catch (err) {
        showToast("Failed to load experience details.", "danger");
        console.error("editExperience error:", err);
      }
    }
  
    async function loadProjectsDropdown() {
      try {
        const res = await fetch('/api/projects?page=1&limit=100');
        const data = await res.json();
        const select = document.getElementById("project_id");
        select.innerHTML = `<option value="">-- Select Project --</option>`;
        data.forEach(p => {
          const opt = new Option(`${p.project_reference} - ${p.client_name}`, p.project_id);
          select.appendChild(opt);
        });
      } catch (err) {
        showToast("Failed to load project list", "warning");
        console.error("loadProjectsDropdown error:", err);
      }
    }
  
    async function loadLOV(refName, selectId) {
      try {
        const res = await fetch(`/api/lov/${refName}`);
        const data = await res.json();
        const select = document.getElementById(selectId);
        select.innerHTML = `<option value="">-- Select --</option>`;
        data.forEach(item => {
          select.innerHTML += `<option value="${item.code_value}">${item.code_description}</option>`;
        });
      } catch (err) {
        showToast(`Failed to load ${refName}`, "warning");
        console.error("loadLOV error:", err);
      }
    }
  
    function resetForm() {
      document.getElementById("clientExperienceForm").reset();
      document.getElementById("experience_id").value = "";
      document.getElementById("feedbackFormSection").style.display = "block";
      window.scrollTo(0, 0);
    }
  
    function closeForm() {
      document.getElementById("clientExperienceForm").reset();
      document.getElementById("feedbackFormSection").style.display = "none";
    }
  
    document.getElementById("clientExperienceForm").addEventListener("submit", async (e) => {
      e.preventDefault();
  
      const payload = {};
      [...document.querySelectorAll("#clientExperienceForm input, #clientExperienceForm select")].forEach(el => {
        if (el.type === "checkbox") {
          payload[el.id] = el.checked;
        } else {
          payload[el.id] = el.value;
        }
      });
  
      try {
        const res = await fetch("/api/client-experience", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload)
        });
        const result = await res.json();
  
        if (res.ok && result.status === "success") {
          showToast("Saved successfully!", "success");
          document.getElementById("clientExperienceForm").reset();
          document.getElementById("feedbackFormSection").style.display = "none";
          loadClientExperiences();
          loadExperienceDashboard();
        } else {
          showToast(result.message || "Something went wrong.", "danger");
          console.error("Submission error:", result);
        }
      } catch (err) {
        showToast("Server error. Please try again later.", "danger");
        console.error("Form submit error:", err);
      }
    });
  
    async function loadExperienceDashboard() {
      try {
        const res = await fetch('/api/client-experience/dashboard');
        const data = await res.json();
        document.getElementById("avgScore").innerText = data.avgScore || "-";
        document.getElementById("testimonialPct").innerText = data.testimonialPct || "-";
        document.getElementById("referralPct").innerText = data.referralPct || "-";
        document.getElementById("totalCount").innerText = data.totalEntries || "-";
      } catch (err) {
        showToast("Dashboard metrics failed to load", "warning");
        console.error("loadExperienceDashboard error:", err);
      }
    }
  
    function showToast(message, type = "info") {
      const toast = document.createElement("div");
      toast.className = `alert alert-${type}`;
      toast.innerText = message;
      toast.style.marginBottom = "10px";
      document.getElementById("toastBox").appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }
  </script>
  <!-- Error Message Toast Container -->
  <div id="toastBox" style="position: fixed; top: 1rem; right: 1rem; z-index: 9999;"></div>
</body>
</html>
2025-07-02 14:22:44,826 INFO: 127.0.0.1 - - [02/Jul/2025 14:22:44] "GET /client-experiences HTTP/1.1" 200 -
2025-07-02 14:22:44,874 INFO: Request: GET /api/projects - 127.0.0.1
2025-07-02 14:22:44,875 INFO: Request: GET /api/lov/FEEDBACK_THEME - 127.0.0.1
2025-07-02 14:22:44,876 INFO: Request: GET /api/client-experiences - 127.0.0.1
2025-07-02 14:22:44,877 INFO: Fetching client experiences: page=1, limit=10
2025-07-02 14:22:44,877 INFO: Request: GET /api/client-experience/dashboard - 127.0.0.1
2025-07-02 14:22:45,639 DEBUG: Executing sp_get_client_experience_summary
2025-07-02 14:22:45,639 DEBUG: Fetching LOV for reference: FEEDBACK_THEME
2025-07-02 14:22:45,639 DEBUG: Executing sp_get_client_experience_list with params: 1, 10
2025-07-02 14:22:45,791 INFO: Fetched 9 LOV entries for FEEDBACK_THEME
2025-07-02 14:22:45,799 INFO: Dashboard summary: RealDictRow([('avg_score', Decimal('5.50')), ('testimonial_pct', Decimal('50.00')), ('referral_pct', Decimal('50.00')), ('total_entries', 4)])
2025-07-02 14:22:45,806 INFO: Fetched 4 client experiences
2025-07-02 14:22:45,819 INFO: Response Status: 200 OK
2025-07-02 14:22:45,819 DEBUG: Response Body: [
  {
    "code_description": "Loved the Print Quality",
    "code_value": "QUALITY"
  },
  {
    "code_description": "Appreciated the Design Aesthetic",
    "code_value": "DESIGN"
  },
  {
    "code_description": "Excellent Communication & Service",
    "code_value": "SERVICE"
  },
  {
    "code_description": "Delivered On Time",
    "code_value": "TIMING"
  },
  {
    "code_description": "Process Felt Confusing",
    "code_value": "CONFUSION"
  },
  {
    "code_description": "Project Delays Experienced",
    "code_value": "DELAY"
  },
  {
    "code_description": "Felt Pricing Was High",
    "code_value": "EXPENSIVE"
  },
  {
    "code_description": "Very Satisfied Overall",
    "code_value": "SATISFIED"
  },
  {
    "code_description": "Not Fully Satisfied",
    "code_value": "UNSATISFIED"
  }
]

2025-07-02 14:22:45,819 INFO: 127.0.0.1 - - [02/Jul/2025 14:22:45] "GET /api/lov/FEEDBACK_THEME HTTP/1.1" 200 -
2025-07-02 14:22:45,828 INFO: Response Status: 200 OK
2025-07-02 14:22:45,828 DEBUG: Response Body: {
  "avgScore": "5.50",
  "referralPct": "50.00",
  "testimonialPct": "50.00",
  "totalEntries": 4
}

2025-07-02 14:22:45,828 INFO: 127.0.0.1 - - [02/Jul/2025 14:22:45] "GET /api/client-experience/dashboard HTTP/1.1" 200 -
2025-07-02 14:22:45,835 INFO: Response Status: 200 OK
2025-07-02 14:22:45,835 DEBUG: Response Body: [
  {
    "client_name": "Mona",
    "experience_id": 4,
    "feedback_theme": "CONFUSION",
    "notes": "Test",
    "project_reference": "PRJ-250628210751-492",
    "referral_collected": true,
    "score": "9",
    "testimonial_collected": false
  },
  {
    "client_name": "Moorthy",
    "experience_id": 3,
    "feedback_theme": "SERVICE",
    "notes": "222",
    "project_reference": "PRJ-250628210825-671",
    "referral_collected": false,
    "score": "3",
    "testimonial_collected": false
  },
  {
    "client_name": "Olivia Bennett",
    "experience_id": 1,
    "feedback_theme": "DESIGN",
    "notes": "Sent photo review via email",
    "project_reference": "PRJ-20250628204922493",
    "referral_collected": true,
    "score": "2",
    "testimonial_collected": true
  },
  {
    "client_name": "Liam Carter",
    "experience_id": 2,
    "feedback_theme": "DESIGN",
    "notes": "Mentioned ease of communication",
    "project_reference": "PRJ-20250628204928029",
    "referral_collected": false,
    "score": "8",
    "testimonial_collected": true
  }
]

2025-07-02 14:22:45,835 INFO: 127.0.0.1 - - [02/Jul/2025 14:22:45] "GET /api/client-experiences?page=1&limit=10 HTTP/1.1" 200 -
2025-07-02 14:22:46,259 DEBUG: Executing sp_get_project_list with params: 1, 100
2025-07-02 14:22:46,323 INFO: Fetched 8 projects
2025-07-02 14:22:46,355 INFO: Response Status: 200 OK
2025-07-02 14:22:46,356 DEBUG: Response Body: [
  {
    "client_name": "ABC",
    "conversion_status": "PND",
    "conversion_status_desc": "Pending",
    "final_amount": null,
    "inquiry_date": "Mon, 30 Jun 2025 00:00:00 GMT",
    "project_id": 9,
    "project_reference": "PRJ-250629205556-327",
    "quoted_amount": null,
    "source": "GGL",
    "source_desc": "Google Search"
  },
  {
    "client_name": "Parthiban",
    "conversion_status": "",
    "conversion_status_desc": null,
    "final_amount": null,
    "inquiry_date": null,
    "project_id": 8,
    "project_reference": "PRJ-250629024020-95",
    "quoted_amount": null,
    "source": "REF",
    "source_desc": "Client Referral"
  },
  {
    "client_name": "Moorthy",
    "conversion_status": "PND",
    "conversion_status_desc": "Pending",
    "final_amount": null,
    "inquiry_date": "Sat, 28 Jun 2025 00:00:00 GMT",
    "project_id": 7,
    "project_reference": "PRJ-250628210825-671",
    "quoted_amount": "222",
    "source": "IG",
    "source_desc": "Instagram"
  },
  {
    "client_name": "Mona",
    "conversion_status": "PND",
    "conversion_status_desc": "Pending",
    "final_amount": null,
    "inquiry_date": "Sat, 28 Jun 2025 00:00:00 GMT",
    "project_id": 6,
    "project_reference": "PRJ-250628210751-492",
    "quoted_amount": "2222",
    "source": "FB",
    "source_desc": "Facebook"
  },
  {
    "client_name": "Harish",
    "conversion_status": "PND",
    "conversion_status_desc": "Pending",
    "final_amount": null,
    "inquiry_date": "Thu, 12 Jun 2025 00:00:00 GMT",
    "project_id": 4,
    "project_reference": "PRJ-250628205751-689",
    "quoted_amount": null,
    "source": "FB",
    "source_desc": "Facebook"
  },
  {
    "client_name": "Olivia Bennett",
    "conversion_status": "CNV",
    "conversion_status_desc": "Converted",
    "final_amount": "1800.00",
    "inquiry_date": null,
    "project_id": 1,
    "project_reference": "PRJ-20250628204922493",
    "quoted_amount": "1800.00",
    "source": "FB",
    "source_desc": "Facebook"
  },
  {
    "client_name": "Liam Carter",
    "conversion_status": "CNV",
    "conversion_status_desc": "Converted",
    "final_amount": "650.00",
    "inquiry_date": null,
    "project_id": 2,
    "project_reference": "PRJ-20250628204928029",
    "quoted_amount": "600.00",
    "source": "REF",
    "source_desc": "Client Referral"
  },
  {
    "client_name": "Emma Rose",
    "conversion_status": "LST",
    "conversion_status_desc": "Lost",
    "final_amount": "222",
    "inquiry_date": null,
    "project_id": 3,
    "project_reference": "PRJ-20250628204912414",
    "quoted_amount": "750.00",
    "source": "GGL",
    "source_desc": "Google Search"
  }
]

2025-07-02 14:22:46,356 INFO: 127.0.0.1 - - [02/Jul/2025 14:22:46] "GET /api/projects?page=1&limit=100 HTTP/1.1" 200 -
2025-07-02 14:24:02,818 INFO: Request: GET / - 127.0.0.1
2025-07-02 14:24:02,819 INFO: Response Status: 200 OK
2025-07-02 14:24:02,819 DEBUG: Response Body: <!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Artisan Workspace</title>
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<style>
body {
  margin: 0;
  font-family: 'Poppins', sans-serif;
  background-color: #f0f0f0; /* Light neutral background */
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  color: #323232;
}

/* Header with dark blue gradient, diagonal shape, and white text */
.header {
  background: linear-gradient(135deg, #29102a, #994ac3, #582c64); /* Deep attractive dark blue gradient */
  padding: 2.5rem 1rem;
  text-align: center;
  color: #fff; /* White text for neatness */
  clip-path: polygon(0 0, 100% 0, 100% 70%, 0 100%);
}
.header h1 {
  font-size: 2.2rem;
  margin-bottom: 0.3rem;
  letter-spacing: 1px;
  font-weight: 700;
  display: flex;
  align-items: center;
  justify-content: center;
}

.header p {
  font-size: 0.9rem;
  max-width: 700px;
  margin: 0 auto;
  line-height: 1.4;
  border-top: 2px solid #fff; /* White line below the title for clean division */
  margin-top: 0.5rem;
  padding-top: 0.5rem;
}

/* Container as CSS Grid: 4 in a row, centered, neat with spacing */
.cards-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1rem;
  padding: 2rem;
  background-color: #f0f0f0; /* Same as body for seamless look */
  margin-top: -1rem;
}
@media(max-width: 768px){
  .cards-container {
    grid-template-columns: repeat(2, 1fr);
  }
}
/* Style for each box: clean, uniform, and attractive */
.card {
  padding: 1.2rem;
  border-radius: 1rem;
  box-shadow: 0 6px 15px rgba(0,0,0,0.08);
  background: #fff; /* White for neatness */
  cursor: pointer;
  transition: all 0.3s ease;
  height: 150px; /* uniform height for consistency */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
}
.card:hover {
  transform: translateY(-6px);
  box-shadow: 0 12px 20px rgba(0,0,0,0.15);
}
.card i {
  font-size: 2rem;
  margin-bottom: 0.75rem;
  transition: transform 0.3s, color 0.3s;
}
.card:hover i {
  color: #0f2027; /* Dark blue matching header for hover effect */
  transform: scale(1.2);
}
h5 {
  font-size: 1rem;
  margin-bottom: 0.3rem;
  font-weight: 600;
  color: #444;
}
h6 {
  font-size: 0.90rem;
  color: #fefefe;
  line-height: 1.2;
  margin: 0;
}
p {
  font-size: 0.75rem;
  color: #555;
  line-height: 1.2;
  margin: 0;
}

/* Border colors for variety */
.card:nth-child(1) { border-top: 3px solid #ff6f61; }
.card:nth-child(2) { border-top: 3px solid #ffb347; }
.card:nth-child(3) { border-top: 3px solid #006064; } /* Dark blue accent */
.card:nth-child(4) { border-top: 3px solid #00b894; }
.card:nth-child(5) { border-top: 3px solid #fd79a8; }
.card:nth-child(6) { border-top: 3px solid #fdba74; }
.card:nth-child(7) { border-top: 3px solid #0984e3; }
.card:nth-child(8) { border-top: 3px solid #00cec9; }

/* Footer with white background, black text, matching style */
.footer {
  background-color: #ffffff;
  color: #000;
  padding: 1rem;
  text-align: center;
  font-size: 0.9rem;
  margin-top: auto;
  border-radius: 0 0 1rem 1rem;
  box-shadow: inset 0 -2px 10px rgba(0,0,0,0.02);
}
</style>
</head>
<body>

<!-- Header: Dark Blue Gradient, Diagonal, White Text, with Icon -->
<div class="header">
  <h1>Stationer Success Tracker</h1>
  <h6>Track leads, projects, and profits - all in one place.</h6>
</div>

<!-- Grid of 4 in a row, responsive to smaller screens -->
<div class="cards-container">
  <div class="card" onclick="location.href='/projects'">
    <i class="fas fa-pen-nib"></i>
    <h5>Design Projects</h5>
    <p>Manage your creative card & stationery projects.</p>
  </div>
  <div class="card" onclick="location.href='/client-experiences'">
    <i class="fas fa-user-friends"></i>
    <h5>Clients & Feedback</h5>
    <p>Track customer feedback and testimonials.</p>
  </div>
  <div class="card" onclick="location.href='/costs'">
    <i class="fas fa-hand-holding-usd"></i>
    <h5>Expenses & Profit</h5>
    <p>Monitor finances clearly and simply.</p>
  </div>
  <div class="card" onclick="location.href='/tasks'">
    <i class="fas fa-sync-alt"></i>
    <h5>Tasks & Routine</h5>
    <p>Stay on top of your daily work.</p>
  </div>
  <div class="card" onclick="location.href='/posts'">
    <i class="fas fa-lightbulb"></i>
    <h5>Content & Ideas</h5>
    <p>Plan your creative content easily.</p>
  </div>
  <div class="card" onclick="location.href='/issues'">
    <i class="fas fa-exclamation-circle"></i>
    <h5>Workflow & Challenges</h5>
    <p>Identify delays and bottlenecks.</p>
  </div>
  <div class="card" onclick="location.href='/inquiry'">
    <i class="fas fa-comments"></i>
    <h5>Leads & Sales</h5>
    <p>Track inquiries and convert leads.</p>
  </div>
  <div class="card" onclick="location.href='/time'">
    <i class="fas fa-hourglass-half"></i>
    <h5>Time & Hours</h5>
    <p>Log your work hours efficiently.</p>
  </div>
</div>

<!-- Footer -->
<div class="footer">
  &copy; <strong>Stationer Success Tracker</strong>. Built with ‚ù§Ô∏è to help creative businesses thrive.
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
2025-07-02 14:24:02,819 INFO: 127.0.0.1 - - [02/Jul/2025 14:24:02] "GET / HTTP/1.1" 200 -
2025-07-02 14:24:03,752 INFO: Request: GET /costs - 127.0.0.1
2025-07-02 14:24:03,753 INFO: Response Status: 404 NOT FOUND
2025-07-02 14:24:03,753 DEBUG: Response Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2025-07-02 14:24:03,754 INFO: 127.0.0.1 - - [02/Jul/2025 14:24:03] "[33mGET /costs HTTP/1.1[0m" 404 -
2025-07-02 14:30:09,748 INFO: [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5050
 * Running on http://192.168.2.46:5050
2025-07-02 14:30:09,749 INFO: [33mPress CTRL+C to quit[0m
2025-07-02 14:30:09,749 INFO:  * Restarting with stat
2025-07-02 14:30:09,913 WARNING:  * Debugger is active!
2025-07-02 14:30:09,920 INFO:  * Debugger PIN: 121-968-921
2025-07-02 14:30:11,878 INFO: Request: GET / - 127.0.0.1
2025-07-02 14:30:11,882 INFO: Response Status: 200 OK
2025-07-02 14:30:11,883 DEBUG: Response Body: <!DOCTYPE html>
<html lang="en">
<head>
  <!-- Meta tags for character encoding and responsiveness -->
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!-- Page Title -->
  <title>Stationer Success Tracker</title>

  <!-- Bootstrap CSS for styling and responsiveness -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

  <style>
    /* Basic body styling for font, background, and layout */
    body {
      margin: 0;
      font-family: 'Poppins', sans-serif;
      background-color: #f0f0f0; /* Light neutral background */
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      color: #323232;
    }

    /* Header styling: gradient background, diagonal shape, white text */
    .header {
      background: linear-gradient(135deg, #29102a, #994ac3, #582c64);
      padding: 2rem 1rem;
      text-align: center;
      color: #fff;
      /* Creates a diagonal cut at the bottom of the header */
      clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);
      position: relative;
      overflow: hidden; /* Ensures no overflow outside header shape */
      max-width: 100%;   /* Prevents overflow on small screens */
      box-sizing: border-box;
    }

    /* Style for main header title */
    .header h1 {
      font-size: 2rem;
      margin-bottom: 0.3rem;
      letter-spacing: 1px;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Responsive width for h1 and h6 for smaller screens */
    .header h1, .header h6 {
      margin: 0 auto;
      max-width: 90vw; /* Ensures text wraps properly on mobile */
      word-wrap: break-word;
      overflow-wrap: break-word;
    }

    /* Subheading styling */
    .header p {
      font-size: 0.9rem;
      max-width: 700px;
      margin: 0 auto;
      line-height: 1.4;
      border-top: 2px solid #fff; /* White top border for separation */
      margin-top: 0.5rem;
      padding-top: 0.5rem;
    }

    /* Container for cards: grid layout with 4 columns, responsive on smaller screens */
    .cards-container {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 1rem;
      padding: 2rem;
      background-color: #f0f0f0; /* Same as body for seamless look */
      margin-top: -1rem;
    }

    /* Responsive adjustment for tablets/small screens: 2 columns */
    @media(max-width: 768px){
      .cards-container {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    /* Individual card styling: clean, attractive, interactive */
    .card {
      padding: 1.2rem;
      border-radius: 1rem;
      box-shadow: 0 6px 15px rgba(0,0,0,0.08);
      background: #fff; /* White background for clarity */
      cursor: pointer; /* Pointer cursor on hover */
      transition: all 0.3s ease; /* Smooth hover effect */
      height: 150px; /* Consistent height for all cards */
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    /* Hover effect for cards: lift and shadow enhancement */
    .card:hover {
      transform: translateY(-6px);
      box-shadow: 0 12px 20px rgba(0,0,0,0.15);
    }

    /* Icon styling within cards, with transition for hover effect */
    .card i {
      font-size: 2rem;
      margin-bottom: 0.75rem;
      transition: transform 0.3s, color 0.3s;
    }

    /* Hover effect for icons: increase size and change color */
    .card:hover i {
      color: #0f2027; /* Dark blue matching header for hover effect */
      transform: scale(1.2);
    }

    /* Heading styles within cards */
    h5 {
      font-size: 1rem;
      margin-bottom: 0.3rem;
      font-weight: 600;
      color: #444;
    }

    /* Subheading styles within cards */
    h6 {
      font-size: 0.90rem;
      color: #fefefe;
      line-height: 1.2;
      margin: 0;
    }

    /* Paragraph text within cards */
    p {
      font-size: 0.75rem;
      color: #555;
      line-height: 1.2;
      margin: 0;
    }

    /* Border colors for each card for variety, based on position */
    .card:nth-child(1) { border-top: 3px solid #ff6f61; }
    .card:nth-child(2) { border-top: 3px solid #ffb347; }
    .card:nth-child(3) { border-top: 3px solid #006064; } /* Dark blue accent */
    .card:nth-child(4) { border-top: 3px solid #00b894; }
    .card:nth-child(5) { border-top: 3px solid #fd79a8; }
    .card:nth-child(6) { border-top: 3px solid #fdba74; }
    .card:nth-child(7) { border-top: 3px solid #0984e3; }
    .card:nth-child(8) { border-top: 3px solid #00cec9; }

    /* Footer styling: white background, centered text, subtle shadow and rounded corners */
    .footer {
      background-color: #ffffff;
      color: #000;
      padding: 1rem;
      text-align: center;
      font-size: 0.9rem;
      margin-top: auto; /* Pushes footer to bottom if flex container expands */
      border-radius: 0 0 1rem 1rem;
      box-shadow: inset 0 -2px 10px rgba(0,0,0,0.02);
    }
  </style>
</head>

<body>

<!-- Header: Diagonal gradient background, title, subtitle -->
<div class="header">
  <h1><a href="/" class="text-white text-decoration-none">Stationer Success Tracker</a></h1>
  <h6>Track leads, projects, and profits - all in one place.</h6>
</div>

<!-- Main grid of cards linking to different sections, responsive layout -->
<div class="cards-container">
  <!-- Card 1: Design Projects -->
  <div class="card" onclick="location.href='/projects'">
    <i class="fas fa-pen-nib"></i>
    <h5>Design Projects</h5>
    <p>Manage your creative card & stationery projects.</p>
  </div>
  <!-- Card 2: Clients & Feedback -->
  <div class="card" onclick="location.href='/client-experiences'">
    <i class="fas fa-user-friends"></i>
    <h5>Clients & Feedback</h5>
    <p>Track customer feedback and testimonials.</p>
  </div>
  <!-- Card 3: Expenses & Profit -->
  <div class="card" onclick="location.href='/costs'">
    <i class="fas fa-hand-holding-usd"></i>
    <h5>Expenses & Profit</h5>
    <p>Monitor finances clearly and simply.</p>
  </div>
  <!-- Card 4: Tasks & Routine -->
  <div class="card" onclick="location.href='/tasks'">
    <i class="fas fa-sync-alt"></i>
    <h5>Tasks & Routine</h5>
    <p>Stay on top of your daily work.</p>
  </div>
  <!-- Card 5: Content & Ideas -->
  <div class="card" onclick="location.href='/posts'">
    <i class="fas fa-lightbulb"></i>
    <h5>Content & Ideas</h5>
    <p>Plan your creative content easily.</p>
  </div>
  <!-- Card 6: Workflow & Challenges -->
  <div class="card" onclick="location.href='/issues'">
    <i class="fas fa-exclamation-circle"></i>
    <h5>Workflow & Challenges</h5>
    <p>Identify delays and bottlenecks.</p>
  </div>
  <!-- Card 7: Leads & Sales -->
  <div class="card" onclick="location.href='/inquiry'">
    <i class="fas fa-comments"></i>
    <h5>Leads & Sales</h5>
    <p>Track inquiries and convert leads.</p>
  </div>
  <!-- Card 8: Time & Hours -->
  <div class="card" onclick="location.href='/time'">
    <i class="fas fa-hourglass-half"></i>
    <h5>Time & Hours</h5>
    <p>Log your work hours efficiently.</p>
  </div>
</div>

<!-- Footer: Branding & message -->
<div class="footer">
  ¬© <strong>Stationer Success Tracker</strong>. Built with ‚ù§Ô∏è to help creative businesses thrive.
</div>

<!-- Bootstrap JS bundle for potential interactivity -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
2025-07-02 14:30:11,883 INFO: 127.0.0.1 - - [02/Jul/2025 14:30:11] "GET / HTTP/1.1" 200 -
2025-07-02 14:30:12,865 INFO: Request: GET /costs - 127.0.0.1
2025-07-02 14:30:12,873 INFO: Response Status: 200 OK
2025-07-02 14:30:12,873 DEBUG: Response Body: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!-- Page Title -->
  <title>Expenses & Profit Tracker</title>

  <!-- Bootstrap CSS for responsive layout and components -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

  <style>
    /* Global box-sizing for consistent sizing */
    * {
      box-sizing: border-box;
    }

    /* Body styling */
    body {
      margin: 0;
      font-family: 'Poppins', sans-serif;
      background-color: #f0f0f0;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      color: #323232;
      font-size: 0.9rem;
      overflow-x: hidden; /* Prevent horizontal scrolling */
    }

    /* Navbar styling */
    .navbar {
      background: linear-gradient(135deg, #29102a, #994ac3, #582c64);
      color: #fff;
      padding: 0.5rem 1rem;
    }

    .navbar-brand {
      color: #fff;
      font-size: 1.2rem;
      font-weight: 600;
    }

    .navbar-toggler {
      border-color: transparent;
    }

    .navbar-nav .nav-link {
      color: #fff;
      font-size: 0.95rem;
      padding: 0.5rem 1rem;
    }

    .navbar-nav .nav-link:hover {
      color: #f8f9fa;
    }

    @media (max-width: 768px) {
      .navbar-brand span {
        font-size: 1rem;
      }

      .navbar-nav .nav-link {
        font-size: 0.9rem;
        text-align: right;
      }
    }

    /* Responsive adjustments for navbar */
    @media (max-width: 768px) {
      .navbar-brand {
        font-size: 1.2rem;
      }
      .navbar-nav .nav-link {
        font-size: 0.9rem;
      }
    }

    /* Main container styles for scrollable content area */
    .main-container {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
      margin-top: 1rem;
      max-height: calc(100vh - 160px);
    }

    /* Button styling */
    .btn-outline-secondary {
      font-size: 0.65rem;
      padding: 0.3rem 0.6rem;
    }

    /* Layout for summary cards (metrics) */
    .summary-cards {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      margin-bottom: 1rem;
      justify-content: center;
    }

    /* Individual card styling for summaries */
    .summary-card {
      flex: 1;
      min-width: 100px;
      max-width: 300px;
      background: linear-gradient(135deg, #f5f0ff, #e9d4f5);
      padding: 1rem;
      text-align: center;
      border-radius: 16px;
      box-shadow: 0 4px 12px rgba(153, 74, 195, 0.2);
      transition: transform 0.2s ease;
    }

    /* Hover effect for cards */
    .summary-card:hover {
      transform: scale(1.02);
    }

    /* Card title styles */
    .summary-card h6 {
      font-size: 0.9rem;
      font-weight: 600;
      color: #5c1a84;
      margin-bottom: 0.4rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    /* Metric value styles */
    .summary-card p {
      font-size: 1.5rem;
      font-weight: bold;
      color: #2e0438;
      margin: 0;
    }

    /* Responsive adjustments for smaller screens */
    @media (max-width: 768px) {
      .summary-card {
        flex: 0 0 calc(50% - 0.5rem);
      }
      .summary-card h6 {
        font-size: 0.8rem;
      }
      .summary-card p {
        font-size: 1.2rem;
      }
    }

    /* Table styling */
    table {
      width: 100%;
      background: #fff;
      border-radius: 0.5rem;
      overflow: hidden;
      font-size: 0.85rem;
    }

    thead {
      background-color: #f8f9fa;
    }

    tbody tr:hover {
      background-color: #f1f1f1;
    }

    /* Responsive adjustments for table */
    @media (max-width: 768px) {
      table {
        font-size: 0.75rem;
      }
    }

    /* Footer styles */
    .footer {
      background-color: #ffffff;
      color: #000;
      padding: 1rem;
      text-align: center;
      font-size: 0.9rem;
      margin-top: auto;
      border-radius: 0 0 1rem 1rem;
      box-shadow: inset 0 -2px 10px rgba(0, 0, 0, 0.02);
    }

    /* Responsive adjustments for footer */
    @media (max-width: 768px) {
      .footer {
        font-size: 0.8rem;
      }
    }
  </style>
</head>

<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container-fluid justify-content-between align-items-center">
      <a class="navbar-brand d-flex align-items-center gap-2" href="/">
        <i class="fas fa-hand-holding-usd fs-4"></i>
        <span class="fw-semibold" style="font-size: 1.1rem;">Expenses & Profit</span>
      </a>

      <button class="navbar-toggler border-0" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
    </div>

    <div class="collapse navbar-collapse px-3" id="navbarNav">
      <ul class="navbar-nav ms-auto">
        <li class="nav-item"><a class="nav-link" href="/">Home</a></li>
        <li class="nav-item"><a class="nav-link" href="/projects">Projects</a></li>
        <li class="nav-item"><a class="nav-link" href="/costs">Expenses</a></li>
        <li class="nav-item"><a class="nav-link" href="/reports">Reports</a></li>
      </ul>
    </div>
  </nav>

  <!-- MAIN CONTENT AREA -->
  <main class="main-container" id="scrollContainer">

    <!-- Top bar: Title and back button -->
    <div class="d-flex justify-content-between align-items-center mb-3">
      <!-- Removed <h2>Expenses & Profit</h2> -->
    </div>

    <!-- Summary Cards: Display key metrics -->
    <div class="summary-cards">
      <div class="summary-card">
        <h6>Total Revenue</h6>
        <p id="totalRevenue">-</p>
      </div>
      <div class="summary-card">
        <h6>Total Cost</h6>
        <p id="totalCost">-</p>
      </div>
      <div class="summary-card">
        <h6>Total Profit</h6>
        <p id="totalProfit">-</p>
      </div>
      <div class="summary-card">
        <h6>Avg. Profit %</h6>
        <p id="avgProfitPct">-</p>
      </div>
    </div>

    <!-- Controls: Add Expense, Search, Show Entries -->
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-3 gap-3">
      
      <!-- Add Expense Button -->
      <div class="flex-grow-1">
        <button class="btn btn-primary btn-sm" id="addExpenseBtn">+ Add Expense</button>
      </div>

      <!-- Search Box -->
      <div class="input-group input-group-sm flex-grow-1" style="max-width: 300px;">
        <input type="text" id="searchBox" class="form-control" placeholder="Search project or client...">
        <button class="btn btn-outline-secondary" onclick="searchExpenses()">
          <i class="fas fa-search"></i>
        </button>
      </div>

      <!-- Show Entries Dropdown -->
      <div class="d-flex align-items-center">
        <label class="me-2 mb-0">Show</label>
        <select id="limitSelect" class="form-select form-select-sm w-auto">
          <option value="5">5</option>
          <option value="10" selected>10</option>
          <option value="25">25</option>
          <option value="50">50</option>
        </select>
        <span class="ms-2">entries</span>
      </div>
    </div>

    <!-- Expense Form: Hidden by default, shown when adding/editing -->
    <section id="expenseFormSection" style="display:none;">
      <form id="expenseForm" class="p-3 border rounded bg-white mb-4">
        <!-- Hidden field for expense ID to differentiate between insert and update -->
        <input type="hidden" id="cost_id" />

        <!-- Form inputs: Project, Cost Type -->
        <div class="row mb-2">
          <div class="col-md-6 position-relative">
            <label>Project</label>
            <!-- Autocomplete search for project -->
            <input type="text" id="projectSearch" class="form-control" placeholder="Type to search project..." autocomplete="off" required />
            <input type="hidden" id="project_id" />
            <!-- Dynamic list for search results -->
            <div id="projectSearchList" class="list-group position-absolute w-100 z-3" style="max-height: 200px; overflow-y: auto; display: none;"></div>
          </div>

          <div class="col-md-6">
            <label>Cost Type</label>
            <!-- Dropdown for cost type, loaded dynamically -->
            <select id="cost_type" class="form-select" required></select>
          </div>
        </div>

        <!-- Amount and Notes -->
        <div class="row mb-2">
          <div class="col-md-6">
            <label>Amount (CAD)</label>
            <input type="number" id="amount" class="form-control" min="0" required />
          </div>
          <div class="col-md-6">
            <label>Notes</label>
            <input type="text" id="notes" class="form-control" />
          </div>
        </div>

        <!-- Buttons: Save and Close -->
        <div class="d-flex gap-2 mt-3">
          <button type="submit" class="btn btn-success btn-sm">Save</button>
          <button type="button" class="btn btn-outline-danger btn-sm" onclick="closeForm()">Close</button>
        </div>
      </form>
    </section>

    <!-- Expense List Table -->
    <section class="table-responsive position-relative mb-4">
      <!-- Loading overlay for AJAX calls -->
      <div id="loading" class="loading-overlay" style="display:none;">
        <div class="spinner-border text-danger"></div>
      </div>
      <!-- Data table -->
      <table class="table table-bordered table-striped mb-0">
        <thead class="table-light">
          <tr>
            <th>#</th>
            <th>Project</th>
            <th>Revenue</th>
            <th>Total Cost</th>
            <th>Profit</th>
            <th>Profit %</th>
            <th>Expand</th>
          </tr>
        </thead>
        <tbody id="expenseGrid"></tbody>
      </table>
    </section>

    <!-- Pagination buttons to navigate pages -->
    <nav class="pagination-controls mb-4 justify-content-center d-flex gap-2">
      <button id="prevBtn" class="btn btn-sm btn-outline-secondary" onclick="changePage(-1)">Prev</button>
      <span id="pageIndicator">Page 1</span>
      <button id="nextBtn" class="btn btn-sm btn-outline-secondary" onclick="changePage(1)">Next</button>
    </nav>
  </main>

  <!-- Footer: Static info -->
  <footer class="footer">
    ¬© <strong>Stationer Success Tracker</strong>. Built with ‚ù§Ô∏è to help creative businesses thrive.
  </footer>

  <!-- Bootstrap JS bundle for components like modal -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Toast container for dynamic alerts -->
  <div id="toastBox" style="position: fixed; top: 1rem; right: 1rem; z-index: 9999;"></div>

  <!-- Delete confirmation modal -->
  <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteConfirmationLabel">Confirm Deletion</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          Are you sure you want to delete this expense?
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger btn-sm" id="confirmDeleteBtn">Delete</button>
        </div>
      </div>
    </div>
  </div>

  <!-- JavaScript Section: Core logic, API interactions, event handlers -->
  <script>
    // ==========================
    // API Endpoints Configuration
    // ==========================
    const API_ENDPOINTS = {
      PROJECT_COSTS: '/api/project-costs', // List of expenses
      PROJECT_COST: '/api/project-cost',   // Single expense get/update/delete
      DASHBOARD: '/api/project-cost/dashboard', // Dashboard metrics
      LOV: '/api/lov/',                     // List of values (dropdowns)
      PROJECT_SEARCH: '/api/projects/search' // Search projects for autocomplete
    };

    // ==========================
    // State Variables
    // ==========================
    let currentPage = 1; // Current page for pagination
    let limit = 10; // Records per page
    let lastSearchQuery = ""; // Search term

    // ==========================
    // Initialization on page load
    // ==========================
    window.onload = () => {
      loadLOV("COST_TYPE", "cost_type"); // Load dropdown options for cost types
      loadProjectSearchLOV();            // Setup project search autocomplete
      loadExpenseDashboard();            // Load summary metrics
      loadExpenses();                    // Load initial expense list
    };

    // ==========================
    // Event Listeners
    // ==========================
    // Limit change (records per page)
    document.getElementById("limitSelect").addEventListener("change", () => {
      limit = parseInt(document.getElementById("limitSelect").value);
      currentPage = 1; // Reset to first page
      loadExpenses();
    });

    // Add new expense (opens form)
    document.getElementById("addExpenseBtn").addEventListener("click", () => {
      resetForm();
    });

    // Search box input event for search filtering
    document.getElementById("searchBox").addEventListener("input", function () {
      lastSearchQuery = this.value.trim();
    });

    // Search button triggers loading with current search term
    function searchExpenses() {
      currentPage = 1;
      loadExpenses();
    }

    // ==========================
    // Load Expenses List (Main Data Table)
    // ==========================
    async function loadExpenses() {
      // Show loading overlay
      const loadingOverlay = document.getElementById("loading");
      if (loadingOverlay) loadingOverlay.style.display = "flex";

      try {
        // Fetch expense data from API with pagination and search
        const res = await fetch(`${API_ENDPOINTS.PROJECT_COSTS}?page=${currentPage}&limit=${limit}&search=${encodeURIComponent(lastSearchQuery)}`);
        const data = await res.json();

        // Validate data
        if (!Array.isArray(data)) throw new Error("Invalid data format");

        // Clear existing table rows
        const tbody = document.getElementById("expenseGrid");
        tbody.innerHTML = "";

        // Handle no data case
        if (data.length === 0) {
          document.getElementById("pageIndicator").innerText = "No records";
          document.getElementById("prevBtn").style.display = "none";
          document.getElementById("nextBtn").style.display = "none";
          return;
        }

        // Update pagination indicators
        document.getElementById("pageIndicator").innerText = `Page ${currentPage}`;
        document.getElementById("prevBtn").style.display = currentPage === 1 ? "none" : "inline-block";
        document.getElementById("nextBtn").style.display = data.length < limit ? "none" : "inline-block";

        // Loop through data and build table rows
        data.forEach((row, idx) => {
          const sno = (currentPage - 1) * limit + idx + 1;
          const projectId = row.project_id;

          // Main expense row
          tbody.innerHTML += `
            <tr>
              <td>${sno}</td>
              <td>${row.project_reference || "-"}</td>
              <td>${isNaN(parseFloat(row.revenue)) ? "-" : `$${parseFloat(row.revenue).toFixed(2)}`}</td>
              <td>${isNaN(parseFloat(row.total_cost)) ? "-" : `$${parseFloat(row.total_cost).toFixed(2)}`}</td>
              <td>${isNaN(parseFloat(row.profit)) ? "-" : `$${parseFloat(row.profit).toFixed(2)}`}</td>
              <td>${isNaN(parseFloat(row.profit_pct)) ? "-" : `${parseFloat(row.profit_pct).toFixed(1)}%`}</td>
              <td>
                <button class="btn btn-sm btn-link p-0" onclick="toggleDetails(this, ${projectId})">
                  ‚¨áÔ∏è
                </button>
              </td>
            </tr>
            <!-- Hidden detail row for project costs -->
            <tr class="details-row" style="display: none;" data-project="${projectId}">
              <td colspan="7">
                <div class="px-3 py-2">
                  <table class="table table-sm mb-0">
                    <thead>
                      <tr>
                        <th>Cost Type</th>
                        <th>Notes</th>
                        <th>Amount</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody id="details-${projectId}">
                      <tr><td colspan="4">Loading...</td></tr>
                    </tbody>
                  </table>
                </div>
              </td>
            </tr>
          `;
        });
      } catch (err) {
        // Show toast notification on failure
        showToast("Failed to load expenses.", "danger");
        console.error("loadExpenses error:", err);
      } finally {
        // Hide loading overlay
        if (loadingOverlay) loadingOverlay.style.display = "none";
      }
    }

    // ==========================
    // Load Dashboard Metrics
    // ==========================
    async function loadExpenseDashboard() {
      try {
        const res = await fetch(API_ENDPOINTS.DASHBOARD);
        const data = await res.json();
        // Populate metrics
        document.getElementById("totalRevenue").innerText = data.totalRevenue || "-";
        document.getElementById("totalCost").innerText = data.totalCost || "-";
        document.getElementById("totalProfit").innerText = data.totalProfit || "-";
        document.getElementById("avgProfitPct").innerText = data.avgProfitPct || "-";
      } catch (err) {
        showToast("Dashboard metrics failed to load", "warning");
        console.error("loadExpenseDashboard error:", err);
      }
    }

    // ==========================
    // Load List of Values (LOV) for dropdowns
    // ==========================
    async function loadLOV(refName, selectId) {
      try {
        const res = await fetch(`${API_ENDPOINTS.LOV}${refName}`);
        const data = await res.json();
        const select = document.getElementById(selectId);
        select.innerHTML = `<option value="">-- Select --</option>`;
        data.forEach(item => {
          select.innerHTML += `<option value="${item.code_value}">${item.code_description}</option>`;
        });
      } catch (err) {
        showToast(`Failed to load ${refName}`, "warning");
        console.error("loadLOV error:", err);
      }
    }

    // ==========================
    // Load Project Search LOV (for autocomplete)
    // ==========================
    let debounceTimeout; // For debouncing user input

    async function loadProjectSearchLOV() {
      const input = document.getElementById("projectSearch");
      const list = document.getElementById("projectSearchList");

      // Handle user input for search
      input.addEventListener("input", function () {
        const query = this.value.trim();
        list.innerHTML = "";
        list.style.display = "none";

        // Debounce to limit API calls
        clearTimeout(debounceTimeout);
        debounceTimeout = setTimeout(async () => {
          if (query.length < 2) return; // Minimum characters to search

          try {
            const res = await fetch(`${API_ENDPOINTS.PROJECT_SEARCH}?query=${encodeURIComponent(query)}`);
            const projects = await res.json();
            if (!Array.isArray(projects)) return;

            // Populate search results
            projects.forEach(p => {
              const item = document.createElement("a");
              item.className = "list-group-item list-group-item-action";
              item.textContent = `${p.project_reference} - ${p.client_name}`;
              item.dataset.id = p.project_id;
              item.onclick = () => {
                input.dataset.selected = "true"; // Mark as selected before blur
                input.value = item.textContent;
                document.getElementById("project_id").value = item.dataset.id;
                list.style.display = "none";
              };
              list.appendChild(item);
            });
            list.style.display = projects.length > 0 ? "block" : "none";
          } catch (err) {
            console.error("Project LOV search error:", err);
          }
        }, 300); // Delay of 300ms
      });

      // Clear selection on focus
      input.addEventListener("focus", function () {
        if (input.dataset.selected === "true") {
          input.dataset.selected = ""; // Reset selected flag
        }
      });
    }

    // ==========================
    // Edit Existing Expense (Pre-fill form)
    // ==========================
    async function editExpense(id) {
      try {
        const res = await fetch(`${API_ENDPOINTS.PROJECT_COST}/${id}`);
        const data = await res.json();
        if (!data || Object.keys(data).length === 0) {
          showToast("Expense not found.", "warning");
          return;
        }
        // Show form section
        document.getElementById("expenseFormSection").style.display = "block";

        // Fill form fields
        for (const key in data) {
          const el = document.getElementById(key);
          if (el) el.value = data[key] || "";
        }

        // Set project search text
        const searchInput = document.getElementById("projectSearch");
        const selectedText = `${data.project_reference} - ${data.client_name}`;
        searchInput.value = selectedText;

        // Scroll to top
        window.scrollTo(0, 0);
      } catch (err) {
        showToast("Failed to load expense details.", "danger");
        console.error("editExpense error:", err);
      }
    }

    // ==========================
    // Toggle Details Row (expand/collapse)
    // ==========================
    async function toggleDetails(button, projectId) {
      const detailRow = document.querySelector(`tr.details-row[data-project="${projectId}"]`);
      const detailsBody = document.getElementById(`details-${projectId}`);

      if (detailRow.style.display === "none") {
        // Expand row
        detailRow.style.display = "table-row";
        button.innerText = "‚¨ÜÔ∏è";

        try {
          // Fetch project costs
          const res = await fetch(`${API_ENDPOINTS.PROJECT_COST}/${projectId}`);
          const data = await res.json();
          detailsBody.innerHTML = "";

          if (!Array.isArray(data)) {
            detailsBody.innerHTML = `<tr><td colspan="4">No cost details found.</td></tr>`;
            return;
          }

          // Populate details table
          data.forEach(item => {
            detailsBody.innerHTML += `
              <tr data-cost-id="${item.cost_id}" data-project="${projectId}" data-cost-type="${item.cost_type}">
                <td class="col-cost-type">${item.cost_type_desc || "-"}</td>
                <td class="col-notes">${item.notes || "-"}</td>
                <td class="col-amount">${isNaN(parseFloat(item.amount)) ? "-" : `$${parseFloat(item.amount).toFixed(2)}`}</td>
                <td>
                  <button class="btn btn-sm btn-link p-0 me-2" onclick="editExpenseInline(${item.cost_id}, ${projectId})">‚úèÔ∏è</button>
                  <button class="btn btn-sm btn-link text-danger p-0" onclick="showDeleteConfirmation(${item.cost_id}, ${projectId})">üóëÔ∏è</button>
                </td>
              </tr>
            `;
          });
        } catch (err) {
          console.error("Error loading detail:", err);
          detailsBody.innerHTML = `<tr><td colspan="4">Error loading details</td></tr>`;
        }
      } else {
        // Collapse row
        detailRow.style.display = "none";
        button.innerText = "‚¨áÔ∏è";
      }
    }

    // ==========================
    // Inline Edit Expense
    // ==========================
    let editingCostId = null; // Track current inline edit

    function editExpenseInline(costId, projectId) {
      const row = document.querySelector(`tr[data-cost-id="${costId}"]`);
      if (!row) return;

      // Capture existing data
      const costType = row.dataset.costType; // code
      const costTypeDesc = row.querySelector(".col-cost-type").innerText.trim(); // description
      const notes = row.querySelector(".col-notes").innerText.trim();
      const amount = row.querySelector(".col-amount").innerText.trim().replace('$', '');

      // Replace row with editable inputs
      row.innerHTML = `
        <td><input class="form-control form-control-sm" value="${costTypeDesc}" disabled></td>
        <td><input class="form-control form-control-sm" id="edit-notes-${costId}" value="${notes}"></td>
        <td><input class="form-control form-control-sm" id="edit-amount-${costId}" value="${amount}"></td>
        <td>
          <button class="btn btn-sm btn-success me-1" onclick="saveExpenseInline(${costId}, ${projectId}, '${costType}')">üíæ</button>
          <button class="btn btn-sm btn-secondary" onclick="cancelEditInline(${projectId})">‚ùå</button>
        </td>
      `;

      editingCostId = costId; // Keep track
    }

    // ==========================
    // Save Inline Edit
    // ==========================
    async function saveExpenseInline(costId, projectId, costType) {
      const notes = document.getElementById(`edit-notes-${costId}`).value.trim();
      const amount = parseFloat(document.getElementById(`edit-amount-${costId}`).value.trim());
      if (isNaN(amount)) return alert("Amount must be a number");

      const payload = {
        cost_id: costId,
        project_id: projectId,
        cost_type: costType, // Send code, not description
        notes,
        amount
      };

      try {
        const res = await fetch(API_ENDPOINTS.PROJECT_COST, {
          method: "POST",
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        const result = await res.json();

        if (result.success === false) throw new Error("Save failed");
        toggleDetails({ innerText: "‚¨áÔ∏è" }, projectId); // Collapse
        toggleDetails({ innerText: "‚¨ÜÔ∏è" }, projectId); // Expand
      } catch (err) {
        console.error("Error saving:", err);
        alert("Failed to save");
      }
    }

    // ==========================
    // Cancel Inline Edit
    // ==========================
    function cancelEditInline(projectId) {
      // Collapse and re-expand to reload original row
      toggleDetails({ innerText: "‚¨áÔ∏è" }, projectId);
      toggleDetails({ innerText: "‚¨ÜÔ∏è" }, projectId);
    }

    // ==========================
    // Save Expense Form (Insert or Update)
    // ==========================
    document.getElementById("expenseForm").addEventListener("submit", async (e) => {
      e.preventDefault();

      // Gather form data
      const payload = {};
      [...document.querySelectorAll("#expenseForm input, #expenseForm select")].forEach(el => {
        payload[el.id] = el.value;
      });

      try {
        const res = await fetch(API_ENDPOINTS.PROJECT_COST, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload)
        });
        const result = await res.json();

        if (res.ok && result.status === "success") {
          showToast("Expense saved successfully!", "success");
          closeForm();
          loadExpenses(); // Refresh list
          loadExpenseDashboard(); // Refresh metrics
        } else {
          showToast(result.message || "Save failed.", "danger");
          console.error("Save error:", result);
        }
      } catch (err) {
        showToast("Server error. Try again later.", "danger");
        console.error("submit error:", err);
      }
    });

    // ==========================
    // Reset and Close Form
    // ==========================
    function resetForm() {
      document.getElementById("expenseForm").reset();
      document.getElementById("cost_id").value = "";
      document.getElementById("expenseFormSection").style.display = "block";
      window.scrollTo(0, 0);
    }

    function closeForm() {
      document.getElementById("expenseForm").reset();
      document.getElementById("expenseFormSection").style.display = "none";
    }

    // ==========================
    // Pagination Controls
    // ==========================
    function changePage(dir) {
      currentPage += dir;
      loadExpenses();
    }

    // ==========================
    // Toast Notifications Utility
    // ==========================
    function showToast(message, type = "info") {
      const toast = document.createElement("div");
      toast.className = `alert alert-${type}`;
      toast.innerText = message;
      toast.style.marginBottom = "10px";
      document.getElementById("toastBox").appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }

    // ==========================
    // Delete Expense with Confirmation
    // ==========================
    let deleteCostId = null;
    let deleteProjectId = null;

    function showDeleteConfirmation(costId, projectId) {
      deleteCostId = costId;
      deleteProjectId = projectId;
      // Show Bootstrap modal
      const deleteModal = new bootstrap.Modal(document.getElementById("deleteConfirmationModal"));
      deleteModal.show();
    }

    document.getElementById("confirmDeleteBtn").addEventListener("click", async () => {
      if (!deleteCostId || !deleteProjectId) return;

      try {
        const res = await fetch(`${API_ENDPOINTS.PROJECT_COST}/${deleteCostId}`, {
          method: "DELETE",
        });
        const result = await res.json();

        if (result.status === "success") {
          showToast("Expense deleted successfully!", "success");
          toggleDetails({ innerText: "‚¨áÔ∏è" }, deleteProjectId);
          toggleDetails({ innerText: "‚¨ÜÔ∏è" }, deleteProjectId);
        } else {
          showToast(result.message || "Failed to delete expense.", "danger");
          console.error("Delete error:", result.message);
        }
      } catch (err) {
        showToast("Server error. Try again later.", "danger");
        console.error("Delete error:", err);
      } finally {
        deleteCostId = null;
        deleteProjectId = null;
        // Hide modal
        const deleteModal = bootstrap.Modal.getInstance(document.getElementById("deleteConfirmationModal"));
        deleteModal.hide();
      }
    });

    // ==========================
    // Utility: DataTable Initialization (if needed)
    // ==========================
    $(document).ready(function () {
      $('table').DataTable({
        dom: 't',
        paging: false,
        info: false
      });
    });
  </script>
</body>
</html>
2025-07-02 14:30:12,873 INFO: 127.0.0.1 - - [02/Jul/2025 14:30:12] "GET /costs HTTP/1.1" 200 -
2025-07-02 14:30:12,918 INFO: Request: GET /api/lov/COST_TYPE - 127.0.0.1
2025-07-02 14:30:12,920 INFO: Request: GET /api/project-cost/dashboard - 127.0.0.1
2025-07-02 14:30:12,921 INFO: Request: GET /api/project-costs - 127.0.0.1
2025-07-02 14:30:13,878 INFO: Response Status: 200 OK
2025-07-02 14:30:13,878 DEBUG: Response Body: [
  {
    "client_name": "Mona",
    "final_amount": "0",
    "profit": "-2",
    "profit_pct": "0",
    "project_id": 6,
    "project_reference": "PRJ-250628210751-492 - Mona",
    "total_cost": "2"
  },
  {
    "client_name": "Liam Carter",
    "final_amount": "650.00",
    "profit": "195.00",
    "profit_pct": "30.00",
    "project_id": 2,
    "project_reference": "PRJ-20250628204928029 - Liam Carter",
    "total_cost": "455"
  },
  {
    "client_name": "Olivia Bennett",
    "final_amount": "1800.00",
    "profit": "1755.00",
    "profit_pct": "97.50",
    "project_id": 1,
    "project_reference": "PRJ-20250628204922493 - Olivia Bennett",
    "total_cost": "45"
  }
]

2025-07-02 14:30:13,879 INFO: 127.0.0.1 - - [02/Jul/2025 14:30:13] "GET /api/project-costs?page=1&limit=10&search= HTTP/1.1" 200 -
2025-07-02 14:30:14,322 INFO: Response Status: 200 OK
2025-07-02 14:30:14,323 DEBUG: Response Body: [
  {
    "code_description": "Labor Cost",
    "code_value": "LAB"
  },
  {
    "code_description": "Shipping",
    "code_value": "SHP"
  },
  {
    "code_description": "Materials",
    "code_value": "MAT"
  },
  {
    "code_description": "Printing",
    "code_value": "PRT"
  },
  {
    "code_description": "Outsourced Work",
    "code_value": "OUT"
  },
  {
    "code_description": "Software Tools",
    "code_value": "SW"
  },
  {
    "code_description": "Unexpected Costs",
    "code_value": "SUR"
  },
  {
    "code_description": "Other",
    "code_value": "OTH"
  }
]

2025-07-02 14:30:14,323 INFO: 127.0.0.1 - - [02/Jul/2025 14:30:14] "GET /api/lov/COST_TYPE HTTP/1.1" 200 -
2025-07-02 14:30:14,328 INFO: Response Status: 200 OK
2025-07-02 14:30:14,329 DEBUG: Response Body: {
  "avgProfitPct": "81.21",
  "totalCost": "502",
  "totalProfit": "2170.00",
  "totalRevenue": "2672.00"
}

2025-07-02 14:30:14,329 INFO: 127.0.0.1 - - [02/Jul/2025 14:30:14] "GET /api/project-cost/dashboard HTTP/1.1" 200 -
2025-07-02 14:30:15,596 INFO: Request: GET / - 127.0.0.1
2025-07-02 14:30:15,597 INFO: Response Status: 200 OK
2025-07-02 14:30:15,597 DEBUG: Response Body: <!DOCTYPE html>
<html lang="en">
<head>
  <!-- Meta tags for character encoding and responsiveness -->
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!-- Page Title -->
  <title>Stationer Success Tracker</title>

  <!-- Bootstrap CSS for styling and responsiveness -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

  <style>
    /* Basic body styling for font, background, and layout */
    body {
      margin: 0;
      font-family: 'Poppins', sans-serif;
      background-color: #f0f0f0; /* Light neutral background */
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      color: #323232;
    }

    /* Header styling: gradient background, diagonal shape, white text */
    .header {
      background: linear-gradient(135deg, #29102a, #994ac3, #582c64);
      padding: 2rem 1rem;
      text-align: center;
      color: #fff;
      /* Creates a diagonal cut at the bottom of the header */
      clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);
      position: relative;
      overflow: hidden; /* Ensures no overflow outside header shape */
      max-width: 100%;   /* Prevents overflow on small screens */
      box-sizing: border-box;
    }

    /* Style for main header title */
    .header h1 {
      font-size: 2rem;
      margin-bottom: 0.3rem;
      letter-spacing: 1px;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Responsive width for h1 and h6 for smaller screens */
    .header h1, .header h6 {
      margin: 0 auto;
      max-width: 90vw; /* Ensures text wraps properly on mobile */
      word-wrap: break-word;
      overflow-wrap: break-word;
    }

    /* Subheading styling */
    .header p {
      font-size: 0.9rem;
      max-width: 700px;
      margin: 0 auto;
      line-height: 1.4;
      border-top: 2px solid #fff; /* White top border for separation */
      margin-top: 0.5rem;
      padding-top: 0.5rem;
    }

    /* Container for cards: grid layout with 4 columns, responsive on smaller screens */
    .cards-container {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 1rem;
      padding: 2rem;
      background-color: #f0f0f0; /* Same as body for seamless look */
      margin-top: -1rem;
    }

    /* Responsive adjustment for tablets/small screens: 2 columns */
    @media(max-width: 768px){
      .cards-container {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    /* Individual card styling: clean, attractive, interactive */
    .card {
      padding: 1.2rem;
      border-radius: 1rem;
      box-shadow: 0 6px 15px rgba(0,0,0,0.08);
      background: #fff; /* White background for clarity */
      cursor: pointer; /* Pointer cursor on hover */
      transition: all 0.3s ease; /* Smooth hover effect */
      height: 150px; /* Consistent height for all cards */
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    /* Hover effect for cards: lift and shadow enhancement */
    .card:hover {
      transform: translateY(-6px);
      box-shadow: 0 12px 20px rgba(0,0,0,0.15);
    }

    /* Icon styling within cards, with transition for hover effect */
    .card i {
      font-size: 2rem;
      margin-bottom: 0.75rem;
      transition: transform 0.3s, color 0.3s;
    }

    /* Hover effect for icons: increase size and change color */
    .card:hover i {
      color: #0f2027; /* Dark blue matching header for hover effect */
      transform: scale(1.2);
    }

    /* Heading styles within cards */
    h5 {
      font-size: 1rem;
      margin-bottom: 0.3rem;
      font-weight: 600;
      color: #444;
    }

    /* Subheading styles within cards */
    h6 {
      font-size: 0.90rem;
      color: #fefefe;
      line-height: 1.2;
      margin: 0;
    }

    /* Paragraph text within cards */
    p {
      font-size: 0.75rem;
      color: #555;
      line-height: 1.2;
      margin: 0;
    }

    /* Border colors for each card for variety, based on position */
    .card:nth-child(1) { border-top: 3px solid #ff6f61; }
    .card:nth-child(2) { border-top: 3px solid #ffb347; }
    .card:nth-child(3) { border-top: 3px solid #006064; } /* Dark blue accent */
    .card:nth-child(4) { border-top: 3px solid #00b894; }
    .card:nth-child(5) { border-top: 3px solid #fd79a8; }
    .card:nth-child(6) { border-top: 3px solid #fdba74; }
    .card:nth-child(7) { border-top: 3px solid #0984e3; }
    .card:nth-child(8) { border-top: 3px solid #00cec9; }

    /* Footer styling: white background, centered text, subtle shadow and rounded corners */
    .footer {
      background-color: #ffffff;
      color: #000;
      padding: 1rem;
      text-align: center;
      font-size: 0.9rem;
      margin-top: auto; /* Pushes footer to bottom if flex container expands */
      border-radius: 0 0 1rem 1rem;
      box-shadow: inset 0 -2px 10px rgba(0,0,0,0.02);
    }
  </style>
</head>

<body>

<!-- Header: Diagonal gradient background, title, subtitle -->
<div class="header">
  <h1><a href="/" class="text-white text-decoration-none">Stationer Success Tracker</a></h1>
  <h6>Track leads, projects, and profits - all in one place.</h6>
</div>

<!-- Main grid of cards linking to different sections, responsive layout -->
<div class="cards-container">
  <!-- Card 1: Design Projects -->
  <div class="card" onclick="location.href='/projects'">
    <i class="fas fa-pen-nib"></i>
    <h5>Design Projects</h5>
    <p>Manage your creative card & stationery projects.</p>
  </div>
  <!-- Card 2: Clients & Feedback -->
  <div class="card" onclick="location.href='/client-experiences'">
    <i class="fas fa-user-friends"></i>
    <h5>Clients & Feedback</h5>
    <p>Track customer feedback and testimonials.</p>
  </div>
  <!-- Card 3: Expenses & Profit -->
  <div class="card" onclick="location.href='/costs'">
    <i class="fas fa-hand-holding-usd"></i>
    <h5>Expenses & Profit</h5>
    <p>Monitor finances clearly and simply.</p>
  </div>
  <!-- Card 4: Tasks & Routine -->
  <div class="card" onclick="location.href='/tasks'">
    <i class="fas fa-sync-alt"></i>
    <h5>Tasks & Routine</h5>
    <p>Stay on top of your daily work.</p>
  </div>
  <!-- Card 5: Content & Ideas -->
  <div class="card" onclick="location.href='/posts'">
    <i class="fas fa-lightbulb"></i>
    <h5>Content & Ideas</h5>
    <p>Plan your creative content easily.</p>
  </div>
  <!-- Card 6: Workflow & Challenges -->
  <div class="card" onclick="location.href='/issues'">
    <i class="fas fa-exclamation-circle"></i>
    <h5>Workflow & Challenges</h5>
    <p>Identify delays and bottlenecks.</p>
  </div>
  <!-- Card 7: Leads & Sales -->
  <div class="card" onclick="location.href='/inquiry'">
    <i class="fas fa-comments"></i>
    <h5>Leads & Sales</h5>
    <p>Track inquiries and convert leads.</p>
  </div>
  <!-- Card 8: Time & Hours -->
  <div class="card" onclick="location.href='/time'">
    <i class="fas fa-hourglass-half"></i>
    <h5>Time & Hours</h5>
    <p>Log your work hours efficiently.</p>
  </div>
</div>

<!-- Footer: Branding & message -->
<div class="footer">
  ¬© <strong>Stationer Success Tracker</strong>. Built with ‚ù§Ô∏è to help creative businesses thrive.
</div>

<!-- Bootstrap JS bundle for potential interactivity -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
2025-07-02 14:30:15,598 INFO: 127.0.0.1 - - [02/Jul/2025 14:30:15] "GET / HTTP/1.1" 200 -
